{"version":3,"sources":["resources/header-img.png","helpers/api.ts","layouts/binarytree.tsx","layouts/home.tsx","components/waves.tsx","serviceWorker.ts","index.js","App.tsx"],"names":["module","exports","buildJsonTree","expression","Promise","resolve","reject","a","axios","post","JSON","stringify","headers","then","catch","props","style","display","justifyContent","color","setup","p5","canvasRef","createCanvas","parent","textFont","stroke","draw","translate","drawTree","tree","len","left","push","line","pop","right","strokeWeight","ellipse","textSize","text","value","console","log","jsonTree","useState","setExpression","undefined","treeForDisplay","setTreeForDisplay","displayTree","api","response","data","result","label","onChange","e","currentTarget","disabled","onClick","position","top","height","width","zIndex","xmlns","viewBox","fill","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","light","className","src","headerImg","marginRight","alt","icon","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45d89b56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-img.649e9fa6.png\";","import axios from 'axios';\r\n\r\nconst API_URI : string = '';\r\n\r\nexport default class {\r\n    static buildJsonTree = (expression: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${API_URI}/api/bjs`, JSON.stringify({ expression }), {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n                .then(resolve)\r\n                .catch(reject);\r\n        })\r\n    }\r\n}","import React from \"react\";\r\nimport { MDBBtn } from 'mdbreact';\r\nimport Sketch from \"react-p5\";\r\n\r\ninterface treeStructure {\r\n    value: string | null,\r\n    left: treeStructure | null,\r\n    right: treeStructure | null\r\n}\r\n\r\ninterface Props {\r\n    jsonTree : treeStructure | undefined\r\n}\r\n\r\nexport default (props: Props) => {\r\n\r\n    function drawTree(tree : any, p5 : any, len : number) : void {\r\n        if (tree.left) {\r\n            p5.push();\r\n            p5.line(0,0,-len,100);\r\n            p5.translate(-len,100);\r\n            drawTree(tree.left, p5, len*.5);\r\n            p5.pop();\r\n        }\r\n\r\n        if (tree.right) {\r\n            p5.push();\r\n            p5.line(0,0,len,100);\r\n            p5.translate(len,100);\r\n            drawTree(tree.right, p5, len*.5);\r\n            p5.pop();\r\n        }\r\n\r\n        p5.strokeWeight(0);\r\n        p5.ellipse(0,0,80,80);\r\n        p5.strokeWeight(2);\r\n        p5.textSize(40);\r\n        p5.text(tree.value, -12, 15);\r\n\r\n        console.log(tree);\r\n    }\r\n\r\n    function setup(p5 : any, canvasRef : any) : void {\r\n        p5.createCanvas(1800, 700).parent(canvasRef);\r\n        p5.textFont('Georgia');\r\n        p5.stroke(60);\r\n        \r\n    }\r\n\r\n    function draw(p5 : any) : void {\r\n        p5.translate(900, 40);\r\n        drawTree(props.jsonTree, p5, 350);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                <MDBBtn color=\"mdb-color\">Naslednji korak</MDBBtn>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <Sketch setup={setup} draw={draw} />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { MDBInput, MDBBtn } from \"mdbreact\";\r\nimport api from './../helpers/api';\r\nimport BinaryTree from './binarytree';\r\n\r\nexport default () => {\r\n    const [expression, setExpression] = useState('');\r\n    const [treeForDisplay, setTreeForDisplay] = useState(undefined);\r\n\r\n    function validateExpression(str: string): boolean {\r\n        return true\r\n    }\r\n\r\n    const displayTree = async () => {\r\n        const response : any = await api.buildJsonTree(expression);\r\n        setTreeForDisplay(response.data.result);\r\n        console.log(response.data.result);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBInput\r\n                value={expression}\r\n                label=\"Vnesi izraz\"\r\n                onChange={(e: React.FormEvent<HTMLInputElement>) => setExpression(e.currentTarget.value)}\r\n            />\r\n            <MDBBtn \r\n                disabled={!validateExpression(expression)}\r\n                onClick={displayTree}\r\n            >\r\n                Prika≈æi binarno drevo\r\n            </MDBBtn>\r\n            <MDBBtn color=\"primary\" disabled={!validateExpression(expression)}>Shunting-yard algoritem</MDBBtn>\r\n            <hr />\r\n            {treeForDisplay && <BinaryTree jsonTree={treeForDisplay} />}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <div style={{ position: \"absolute\", top: 0, left: 0, height: \"100%\", width: '100%', zIndex: -1 }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n                <path fill=\"#0099ff\" fillOpacity=\"1\" d=\"M0,96L60,101.3C120,107,240,117,360,112C480,107,600,85,720,69.3C840,53,960,43,1080,69.3C1200,96,1320,160,1380,192L1440,224L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"></path>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log('New content is available; please refresh.');\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log('Content is cached for offline use.');\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBContainer } from 'mdbreact';\nimport Content from './layouts/home';\nimport Waves from './components/waves';\nimport headerImg from './resources/header-img.png';\n\nexport default () => {\n\n    return (\n        <>\n            <Waves />\n            <MDBContainer>\n                <MDBBreadcrumb light className='header'>\n                    <img src={headerImg} style={{ height: 60, marginRight: 40 }} alt=\"VSAE\" />\n                    <MDBBreadcrumbItem icon='home'>\n                        Domov\n                    </MDBBreadcrumbItem>\n                    <MDBBreadcrumbItem icon='file'>\n                        Dokumentacija\n                    </MDBBreadcrumbItem>\n                </MDBBreadcrumb>\n            </MDBContainer>\n            <div className='content'>\n                <Content />\n            </div>\n        </>\n    );\n}\n"],"sourceRoot":""}