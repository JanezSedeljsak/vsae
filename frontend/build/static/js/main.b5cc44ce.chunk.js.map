{"version":3,"sources":["helpers/api.ts","layouts/binarytree.tsx","layouts/loading.tsx","helpers/sleep.ts","components/label.tsx","layouts/home.tsx","helpers/upload.ts","components/waves.tsx","App.tsx","serviceWorker.ts","index.js","resources/header-img.png"],"names":["buildJsonTree","expression","Promise","resolve","reject","a","axios","post","JSON","stringify","headers","then","catch","imgToText","encodedImage","treeForBuild","useState","jsonTree","setJsonTree","hexagon","s","p5","color","noStroke","fill","push","scale","beginShape","vertex","endShape","close","pop","useEffect","style","display","justifyContent","setup","canvasRef","createCanvas","parent","textSize","textFont","stroke","draw","clear","translate","drawTree","tree","len","left","right","line","treeVal","String","value","length","text","printOut","substr","className","Array","from","_","i","key","sleep","ms","setTimeout","LabeledHeader","icon","label","val","mathFont","marginRight","padding","fontStyle","setExpression","disableControlls","setDisableControlls","modal","setModal","equation","VSAEExpression","result","steps","setTreeData","displayIndex","setDisplayIndex","loading","setLoading","fileupload","setFileUpload","callOut","addToast","useToasts","data","setData","reader","FileReader","input","document","createElement","type","visibility","click","onchange","file","files","addEventListener","api","response","error","appearance","autoDismiss","responseEquation","readAsDataURL","fileIsUplading","useUpload","changeStepIndex","index","displayTree","getToastSettings","base","autoDismissTimeout","runSolve","toFixed","getStepLabelsAtIndex","description","stepEquation","stepNum","isOpen","toggle","size","width","active","href","flexDirection","height","disabled","onChange","e","currentTarget","gradient","onClick","background","borderTop","position","top","zIndex","xmlns","viewBox","fillOpacity","d","App","light","src","headerImg","alt","window","open","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b5cc44ce.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URI : string = 'http://localhost:6969';\r\nconst dev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n\r\nexport default class {\r\n    static buildJsonTree = (expression: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${dev ? API_URI : ''}/api/bt/v3/bjs`, JSON.stringify({ expression }), {\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(resolve).catch(reject);\r\n        })\r\n    }\r\n\r\n    static imgToText = (encodedImage: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${dev ? API_URI : ''}/api/base/tfi`, JSON.stringify({ encodedImage }), {\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }).then(resolve).catch(reject);\r\n        })\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport sleep from './../helpers/sleep';\r\nimport treeStructure from './../interfaces/tree';\r\n\r\ninterface Props { treeForBuild: treeStructure | undefined }\r\n\r\nexport default ({ treeForBuild }: Props) => {\r\n\r\n    const [jsonTree, setJsonTree] = useState<treeStructure | undefined>(treeForBuild);\r\n    useEffect(() => setJsonTree(treeForBuild), [treeForBuild])\r\n\r\n    function hexagon(s:any, p5:any, color: string = '#45526e') {\r\n        p5.noStroke();\r\n        p5.fill(color);\r\n        p5.push();\r\n        p5.scale(s);\r\n        p5.beginShape();\r\n        p5.vertex(-75, -130);\r\n        p5.vertex(75, -130);\r\n        p5.vertex(150, 0);\r\n        p5.vertex(75, 130);\r\n        p5.vertex(-75, 130);\r\n        p5.vertex(-150, 0);\r\n        p5.endShape(p5.close);\r\n        p5.pop();\r\n    }\r\n\r\n    function drawTree(tree: any, p5: any, len: number): void {\r\n        if (tree?.left && tree?.right) {\r\n            p5.stroke(60);\r\n            p5.push();\r\n            p5.line(0, 0, -len, 100);\r\n            p5.translate(-len, 100);\r\n            drawTree(tree.left, p5, len * .51);\r\n            p5.pop();\r\n            p5.push();\r\n            p5.line(0, 0, len, 100);\r\n            p5.translate(len, 100);\r\n            drawTree(tree.right, p5, len * .51);\r\n            p5.pop();\r\n            p5.noStroke();\r\n        }\r\n\r\n        switch(tree.color) {\r\n            case -1: \r\n                hexagon(.22,p5); \r\n                break;\r\n            case 1: \r\n                hexagon(.22,p5,'#1976d2'); \r\n                break;\r\n            case 2: hexagon(.22,p5,'#303f9f'); \r\n                break;\r\n            case 3: \r\n                hexagon(.32,p5,'#1976d2'); \r\n                break;\r\n            default: \r\n                hexagon(.22,p5); \r\n                break;\r\n        }\r\n\r\n        p5.fill('#eee');\r\n        const treeVal = String(tree?.value);\r\n        if (treeVal.length <= 2) {\r\n            p5.text(treeVal, -10, 10);\r\n        } else {\r\n            let printOut = treeVal.length === 3 ? treeVal : treeVal.substr(0,3) + '...'\r\n            p5.text(printOut, -16, 10);\r\n        }\r\n    }\r\n\r\n    function setup(p5: any, canvasRef: any): void {\r\n        p5.createCanvas(1800, 700).parent(canvasRef);\r\n        p5.textSize(20);\r\n        p5.textFont('Roboto Mono');\r\n        p5.stroke(60);\r\n    }\r\n\r\n    function draw(p5: any) {\r\n        p5.clear();\r\n        p5.translate(900, 60);\r\n        drawTree(jsonTree, p5, 350);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Sketch setup={setup} draw={draw} />\r\n        </div>\r\n    );\r\n}","\r\nimport React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className='fixed-layout'>\r\n        <div className=\"spinner-container\">\r\n            {Array.from(Array(16), (_: undefined, i: number) => <div key={i} className=\"block\"></div>)}\r\n        </div>\r\n    </div>\r\n  );\r\n}","function sleep(ms: number): Promise<any> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default sleep;","import React from 'react';\r\nimport { MDBIcon } from 'mdbreact';\r\n\r\ninterface HeaderProps { icon?: string, label: string, val: string | number, mathFont?: boolean }\r\n\r\nexport const LabeledHeader = ({ icon, label, val, mathFont }: HeaderProps) => (\r\n    <div>\r\n        <MDBIcon icon={icon || ''} />\r\n        <span style={{ marginRight: 10, color: '#777', padding: 2, fontStyle: 'italic' }}>{label}</span>\r\n        <span className={!mathFont ? 'math' : 'step-desc'} style={{ color: '#444', padding: 0 }}>{val}</span>\r\n    </div>\r\n);","import React, { useState, useEffect } from \"react\";\r\nimport { MDBInput, MDBBtn, MDBIcon, MDBBtnGroup, MDBModal, MDBModalBody, MDBModalHeader, MDBAnimation, MDBListGroupItem, MDBListGroup } from \"mdbreact\";\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport api from './../helpers/api';\r\nimport BinaryTree from './binarytree';\r\nimport { default as Spinner } from './../layouts/loading';\r\nimport sleep from './../helpers/sleep';\r\nimport { useUpload } from './../helpers/upload';\r\nimport { LabeledHeader } from './../components/label';\r\n\r\nexport default () => {\r\n    const [expression, setExpression] = useState<string>('');\r\n    const [disableControlls, setDisableControlls] = useState<boolean>(false);\r\n    const [modal, setModal] = useState<boolean>(false);\r\n    const [{ equation, VSAEExpression, result, steps }, setTreeData] = useState<any>({});\r\n    const [displayIndex, setDisplayIndex] = useState<number>(0);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [fileupload, setFileUpload] = useState<number>(0);\r\n    const { data, fileIsUplading } = useUpload(fileupload);\r\n    const { addToast } = useToasts();\r\n\r\n    useEffect(() => setLoading(!!fileIsUplading), [fileIsUplading]);\r\n    useEffect(() => data?.responseEquation && setExpression(data?.responseEquation), [data]);\r\n\r\n    const changeStepIndex = (index: number) => (index >= 0 && index < steps?.length) && setDisplayIndex(index);\r\n\r\n    const displayTree = async (): Promise<void> => {\r\n        if (!expression) {\r\n            addToast(\"Prosimo vnesite izraz!\", getToastSettings('error'));\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        const response: any = await api.buildJsonTree(expression);\r\n        if (response.data.error) addToast(response.data.error, getToastSettings('error'));\r\n        else {\r\n            setTreeData(response.data.base);\r\n            setDisplayIndex(0);\r\n            await sleep(1000);\r\n            addToast(`Izraz je bil uspešno pretvorjen v binarno drevo!`, getToastSettings('success'));\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const getToastSettings = (type: string): any => ({\r\n        appearance: type,\r\n        autoDismiss: true,\r\n        autoDismissTimeout: 2500\r\n    });\r\n\r\n    async function runSolve(index: number,  isFirstRun: boolean = true) {\r\n        if (isFirstRun) {\r\n            setDisableControlls(true);\r\n            addToast(\"Reševanje v teku!\", getToastSettings('info'));\r\n        }\r\n        if (index >= 0 && index < steps?.length) {\r\n            setDisplayIndex(index);\r\n            await sleep(1000);\r\n            runSolve(index + 1, false)\r\n        } else {\r\n            addToast(`Izraz je bil uspešno rešen; rezultat: ${result.toFixed(2)}`, getToastSettings('success'));\r\n            await sleep(2500);\r\n            setDisableControlls(false);\r\n        }\r\n    }\r\n\r\n    function getStepLabelsAtIndex(index: number) {\r\n        const { equation, description, stepEquation } = steps[index] || {};\r\n        const stepNum = index + 1 <= steps?.length - 1 ? `${index + 1}/${steps?.length - 1}` : 'Konec'\r\n\r\n        return (\r\n            <>\r\n                <LabeledHeader {...{ icon: 'info-circle', label: 'Korak:', val: stepNum }} />\r\n                <LabeledHeader {...{ icon: 'caret-right', label: 'Vmesni korak:', val: description, mathFont: true }} />\r\n                <LabeledHeader {...{ icon: 'caret-right', label: 'Izračun:', val: equation }} />\r\n                <LabeledHeader {...{ icon: 'caret-right', label: 'Stanje izraza:', val: stepEquation }} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    const StepModal = () => (\r\n        <MDBModal isOpen={modal} toggle={() => setModal(!modal)} size=\"lg\">\r\n            <MDBModalHeader toggle={() => setModal(!modal)}>\r\n                <MDBIcon icon=\"list-ol\" />{\" Postopek reševanja\"}\r\n            </MDBModalHeader>\r\n            <MDBModalBody>\r\n                <MDBListGroup style={{ width: \"100%\" }}>\r\n                    <MDBListGroupItem active href=\"#\">\r\n                        <div className=\"d-flex w-100 justify-content-between\">\r\n                            <h5 className=\"mb-1\">\r\n                                <MDBIcon icon=\"th\" />\r\n                                {\" Začetni račun: \"}\r\n                                <b>{equation}</b>\r\n                                <p className=\"mb-1\">\r\n                                    <MDBIcon icon=\"stop\" />\r\n                                    {\" Končna vrednost: \"}\r\n                                    <b>{result}</b>\r\n                                </p>\r\n                            </h5>\r\n                        </div>\r\n                    </MDBListGroupItem>\r\n                    {steps && Array.from(Array(steps.length - 1), (_: undefined, index: number) => (\r\n                        <MDBListGroupItem key={index}>\r\n                            {getStepLabelsAtIndex(index)}\r\n                        </MDBListGroupItem>\r\n                    ))}\r\n                </MDBListGroup>\r\n            </MDBModalBody>\r\n        </MDBModal>\r\n    )\r\n\r\n    const TopPanelRow = () =>  (\r\n        <div style={{ display: \"flex\", flexDirection: 'row', width: '100%', padding: 10 }}>\r\n            <div style={{ display: \"flex\", flexDirection: 'column', width: '80%' }}>\r\n                <LabeledHeader {...{ icon: 'angle-right', label: 'Vnešen izraz:', val: equation }} />\r\n                <LabeledHeader {...{ icon: 'angle-right', label: 'VSAE format:', val: VSAEExpression }} />\r\n                <LabeledHeader {...{ icon: 'angle-right', label: 'Končni rezultat:', val: result }} />\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"row-reverse\", width: '20%' }}>\r\n                <MDBBtnGroup className=\"mr-2\">\r\n                    <MDBBtn disabled={disableControlls} color=\"mdb-color\" onClick={() => setModal(true)}><MDBIcon icon=\"list-ol\" /></MDBBtn>\r\n                </MDBBtnGroup>\r\n            </div>\r\n            <hr style={{ borderTop: '1px solid black' }} />\r\n        </div>\r\n    )\r\n\r\n    const SecondPanelRow = () => (\r\n        <>\r\n            <div style={{ width: 'calc(100%-20px)', height: 1, background: '#aaa' }} />\r\n            <div style={{ display: \"flex\", flexDirection: 'row', width: '100%', padding: 10 }}>\r\n                <div style={{ display: \"flex\", flexDirection: 'column', width: '70%' }}>\r\n                    {getStepLabelsAtIndex(displayIndex)}\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: \"row-reverse\", width: '30%' }}>\r\n                    <MDBBtnGroup className=\"mr-2\">\r\n                        <MDBBtn disabled={disableControlls} color=\"mdb-color\" onClick={() => changeStepIndex(displayIndex - 1)}><MDBIcon icon=\"angle-double-left\" /></MDBBtn>\r\n                        <MDBBtn disabled={disableControlls}  color=\"mdb-color\" onClick={() => runSolve(displayIndex + 1)}><MDBIcon icon=\"calculator\" /></MDBBtn>\r\n                        <MDBBtn disabled={disableControlls} color=\"mdb-color\" onClick={() => changeStepIndex(displayIndex + 1)}><MDBIcon icon=\"angle-double-right\" /></MDBBtn>\r\n                    </MDBBtnGroup>\r\n                </div>\r\n                <hr style={{ borderTop: '1px solid black' }} />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <StepModal />\r\n            <div style={{ display: 'flex', flexDirection: 'row', width: '100%', height: \"80px\" }}>\r\n                <MDBInput\r\n                    value={expression}\r\n                    label=\"Vnesi izraz\"\r\n                    disabled={disableControlls}\r\n                    onChange={(e: React.FormEvent<HTMLInputElement>) => setExpression(e.currentTarget.value)}\r\n                />\r\n                <MDBBtn disabled={disableControlls} gradient=\"aqua\" onClick={() => setFileUpload(fileupload + 1)}>\r\n                    <MDBIcon icon=\"upload\" />\r\n                </MDBBtn>\r\n                <MDBBtn  disabled={disableControlls} gradient=\"blue\" onClick={displayTree}>\r\n                    <MDBIcon icon=\"equals\" />\r\n                </MDBBtn>\r\n            </div>\r\n            <div>\r\n                {(steps?.length && !loading) ? (\r\n                    <MDBAnimation type=\"bounce\" className='panel'>\r\n                        <div style={{ display: \"flex\", flexDirection: 'column', width: '100%', background: '#ffffff55', padding: '10px' }}>\r\n                            <TopPanelRow />\r\n                            <SecondPanelRow />\r\n                        </div>\r\n                    </MDBAnimation>\r\n                ) : loading && <Spinner />}\r\n                <hr />\r\n            </div>\r\n            {(steps?.length && !loading) ? <BinaryTree treeForBuild={steps[displayIndex].tree} /> : null}\r\n        </>\r\n    );\r\n};","import { useState, useEffect } from 'react';\r\nimport sleep from './sleep';\r\nimport api from './api';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nexport const useUpload = (callOut: any) => {\r\n    const { addToast } = useToasts();\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState<any>(null);\r\n    \r\n    useEffect(() => {\r\n        const reader = new FileReader();\r\n        if (callOut !== 0 ) {\r\n            const input: any = document.createElement('input');\r\n            input.type = 'file';\r\n            input.style.visibility = 'hidden';\r\n            setTimeout(() => input.click(), 200);\r\n            \r\n            input.onchange = () => {\r\n                setLoading(true);\r\n                const file = input.files[0];\r\n                reader.addEventListener(\"load\", async function () {\r\n                    const encodedImage: any = reader.result;\r\n                    const response: any = await api.imgToText(encodedImage);\r\n                    await sleep(500);\r\n                    if (response.data.error) addToast(response.data.error, { appearance: 'error', autoDismiss: true });\r\n                    else setData({ responseEquation: response.data.equation });\r\n                    setLoading(false);\r\n\r\n                }, false);\r\n\r\n                if (file) reader.readAsDataURL(file)\r\n            }\r\n        }\r\n    }, [callOut]);\r\n\r\n    return { data, fileIsUplading: loading };\r\n}","import React from 'react';\r\n\r\nexport default () => (\r\n    <div style={{ position: \"absolute\", top: 0, left: 0, height: \"100%\", width: '100%', zIndex: -1 }}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n            <path fill=\"#0099ff\" fillOpacity=\"1\" d=\"M0,96L60,101.3C120,107,240,117,360,112C480,107,600,85,720,69.3C840,53,960,43,1080,69.3C1200,96,1320,160,1380,192L1440,224L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"></path>\r\n        </svg>\r\n    </div>\r\n)","import React from 'react';\r\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBContainer } from 'mdbreact';\r\nimport Content from './layouts/home';\r\nimport Waves from './components/waves';\r\nimport headerImg from './resources/header-img.png';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n\r\nconst App = () => {\r\n\r\n    function goToDocumentation(): void {\r\n        window.open(\"https://github.com/JanezSedeljsak/vsae/blob/master/README.md\", \"_blank\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Waves />\r\n            <MDBContainer>\r\n                <MDBBreadcrumb light className='header'>\r\n                    <img src={headerImg} style={{ height: 60, marginRight: 40 }} alt=\"VSAE\" />\r\n                    <MDBBreadcrumbItem icon='file' onClick={goToDocumentation}>\r\n                        Dokumentacija\r\n                    </MDBBreadcrumbItem>\r\n                </MDBBreadcrumb>\r\n            </MDBContainer>\r\n            <div className='content'>\r\n                <Content />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default () => (\r\n    <ToastProvider>\r\n      <App />\r\n    </ToastProvider>\r\n);\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL!,\r\n            window.location.toString()\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker) {\r\n                    installingWorker.onstatechange = () => {\r\n                        if (installingWorker.state === 'installed') {\r\n                            if (navigator.serviceWorker.controller) {\r\n                                // At this point, the old content will have been purged and\r\n                                // the fresh content will have been added to the cache.\r\n                                // It's the perfect time to display a 'New content is\r\n                                // available; please refresh.' message in your web app.\r\n                                console.log('New content is available; please refresh.');\r\n                            } else {\r\n                                // At this point, everything has been precached.\r\n                                // It's the perfect time to display a\r\n                                // 'Content is cached for offline use.' message.\r\n                                console.log('Content is cached for offline use.');\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type')!.indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/header-img.649e9fa6.png\";"],"sourceRoot":""}