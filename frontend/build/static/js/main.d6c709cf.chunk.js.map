{"version":3,"sources":["resources/header-img.png","helpers/api.ts","layouts/binarytree.tsx","layouts/loading.tsx","helpers/sleep.ts","layouts/home.tsx","helpers/upload.ts","components/waves.tsx","serviceWorker.ts","index.js","App.tsx"],"names":["module","exports","buildJsonTree","expression","Promise","resolve","reject","a","axios","post","JSON","stringify","headers","then","catch","imgToText","encodedImage","props","useState","jsonTree","setJsonTree","useEffect","style","display","justifyContent","setup","p5","canvasRef","createCanvas","parent","textSize","textFont","stroke","draw","clear","translate","drawTree","tree","len","left","right","push","line","pop","noStroke","s","fill","scale","beginShape","vertex","endShape","close","hexagon","treeVal","String","value","length","text","printOut","substr","className","Array","from","_","i","key","sleep","ms","setTimeout","setExpression","setModal","apiBlockOfCode","setApiBlockOfCode","displayIndex","setDisplayIndex","loading","setLoading","fileupload","setFileUpload","callOut","data","setData","reader","FileReader","input","document","createElement","type","visibility","click","onchange","file","files","addEventListener","result","api","response","responseEquation","equation","readAsDataURL","fileIsUplading","useUpload","displayTree","base","changeStepIndex","index","steps","runSolve","_nF","num","Number","parseFloat","toString","toFixed","parseInt","LabeledHeader","label","val","mathFont","marginLeft","marginRight","color","padding","fontStyle","flexDirection","width","height","onChange","e","currentTarget","gradient","onClick","borderRadius","icon","background","VSAEExpression","paddingBottom","borderTop","description","operation","isFunction","margin","position","top","zIndex","xmlns","viewBox","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","light","src","headerImg","alt","open","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6c709cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-img.649e9fa6.png\";","import axios from 'axios';\r\n\r\nconst API_URI : string = 'http://localhost:5000';\r\n\r\nexport default class {\r\n    static buildJsonTree = (expression: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${API_URI}/api/bjs`, JSON.stringify({ expression }), {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n                .then(resolve)\r\n                .catch(reject);\r\n        })\r\n    }\r\n\r\n\r\n    static imgToText = (encodedImage: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${API_URI}/api/tfi`, JSON.stringify({ encodedImage }), {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n                .then(resolve)\r\n                .catch(reject);\r\n        })\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport sleep from './../helpers/sleep';\r\nimport treeStructure from './../interfaces/tree';\r\n\r\ninterface Props {\r\n    jsonTree: treeStructure | undefined,\r\n}\r\n\r\nexport default (props: Props) => {\r\n\r\n    const [jsonTree, setJsonTree] = useState<treeStructure | undefined>(props.jsonTree);\r\n    useEffect(() => setJsonTree(props.jsonTree), [props.jsonTree])\r\n\r\n    function hexagon(s:any, p5:any) {\r\n        p5.noStroke();\r\n        p5.fill('#45526e');\r\n        p5.push();\r\n        p5.scale(s);\r\n        p5.beginShape();\r\n        p5.vertex(-75, -130);\r\n        p5.vertex(75, -130);\r\n        p5.vertex(150, 0);\r\n        p5.vertex(75, 130);\r\n        p5.vertex(-75, 130);\r\n        p5.vertex(-150, 0);\r\n        p5.endShape(p5.close);\r\n        p5.pop();\r\n    }\r\n\r\n    function drawTree(tree: any, p5: any, len: number): void {\r\n        if (tree?.left && tree?.right) {\r\n            p5.stroke(60);\r\n            p5.push();\r\n            p5.line(0, 0, -len, 100);\r\n            p5.translate(-len, 100);\r\n            drawTree(tree.left, p5, len * .51);\r\n            p5.pop();\r\n            p5.push();\r\n            p5.line(0, 0, len, 100);\r\n            p5.translate(len, 100);\r\n            drawTree(tree.right, p5, len * .51);\r\n            p5.pop();\r\n            p5.noStroke();\r\n        }\r\n\r\n        hexagon(.22,p5);\r\n        p5.fill('#eee');\r\n        const treeVal = String(tree?.value);\r\n        if (treeVal.length <= 2) {\r\n            p5.text(treeVal, -10, 10);\r\n        } else {\r\n            let printOut = treeVal.length == 3 ? treeVal : treeVal.substr(0,3) + '...'\r\n            p5.text(printOut, -16, 10);\r\n        }\r\n    }\r\n\r\n    function setup(p5: any, canvasRef: any): void {\r\n        p5.createCanvas(1800, 700).parent(canvasRef);\r\n        p5.textSize(20);\r\n        p5.textFont('Roboto Mono');\r\n        p5.stroke(60);\r\n    }\r\n\r\n    function draw(p5: any) {\r\n        p5.clear();\r\n        p5.translate(900, 40);\r\n        drawTree(jsonTree, p5, 350);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Sketch setup={setup} draw={draw} />\r\n        </div>\r\n    );\r\n}","\r\nimport React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className='fixed-layout'>\r\n        <div className=\"spinner-container\">\r\n            {Array.from(Array(16), (_: undefined, i: number) => <div key={i} className=\"block\"></div>)}\r\n        </div>\r\n    </div>\r\n  );\r\n}","function sleep(ms: number): Promise<any> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default sleep;","import React, { useState, useEffect } from \"react\";\r\nimport { MDBInput, MDBBtn, MDBIcon, MDBBtnGroup, MDBModal, MDBModalBody, MDBModalHeader, MDBAnimation, MDBListGroupItem, MDBListGroup } from \"mdbreact\";\r\nimport api from './../helpers/api';\r\nimport BinaryTree from './binarytree';\r\nimport { default as Spinner } from './../layouts/loading';\r\nimport sleep from './../helpers/sleep';\r\nimport { useUpload } from './../helpers/upload';\r\n\r\n\r\nexport default () => {\r\n    const [expression, setExpression] = useState<string>('');\r\n    const [modal, setModal] = useState<boolean>(false);\r\n    const [apiBlockOfCode, setApiBlockOfCode] = useState<any>({});\r\n    const [displayIndex, setDisplayIndex] = useState<number>(0);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [fileupload, setFileUpload] = useState<number>(0);\r\n    const { data, fileIsUplading } = useUpload(fileupload);\r\n\r\n    useEffect(() => setLoading(!!fileIsUplading), [fileIsUplading]);\r\n    useEffect(() => data?.responseEquation && setExpression(data?.responseEquation), [data])\r\n\r\n    const displayTree = async (): Promise<void> => {\r\n        if (!expression) return;\r\n        setLoading(true);\r\n        const response: any = await api.buildJsonTree(expression);\r\n        setApiBlockOfCode(response.data.base);\r\n        setDisplayIndex(0);\r\n        await sleep(1000);\r\n        setLoading(false);\r\n    }\r\n\r\n    function changeStepIndex(index: number) {\r\n        if (index >= 0 && index < apiBlockOfCode?.steps?.length) {\r\n            setDisplayIndex(index);\r\n        }\r\n    }\r\n\r\n    async function runSolve(index: number) {\r\n        if (index >= 0 && index < apiBlockOfCode?.steps?.length) {\r\n            setDisplayIndex(index);\r\n            await sleep(1000);\r\n            runSolve(index + 1)\r\n        }\r\n    }\r\n\r\n    function _nF(num: any) {\r\n        if (!num) return '';\r\n        if (Number.parseFloat(num) % 1 !== 0) {\r\n            return Number.parseFloat(num.toString()).toFixed(4);\r\n        } else {\r\n            return Number.parseInt(num);\r\n        }\r\n    }\r\n\r\n\r\n    interface HeaderProps {\r\n        label: string,\r\n        val: string | number,\r\n        mathFont?: boolean\r\n    }\r\n\r\n\r\n    function stepsModal() {\r\n        return (\r\n            <MDBModal isOpen={false} toggle={() => {}} size=\"lg\">\r\n                <MDBModalHeader toggle={() => {}}>\r\n                    <MDBIcon icon=\"list-ol\" />{\" Postopek reševanja\"}\r\n                </MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div>neki</div>\r\n                </MDBModalBody>\r\n            </MDBModal>\r\n        )\r\n    }\r\n\r\n\r\n    function getModalContent() {\r\n        return (\r\n            <MDBListGroup style={{ width: \"100%\" }}>\r\n                <MDBListGroupItem active href=\"#\">\r\n                    <div className=\"d-flex w-100 justify-content-between\">\r\n                        <h5 className=\"mb-1\">\r\n                            <MDBIcon icon=\"th\" />\r\n                            {\" Začetni račun: \"}\r\n                            <b>{}</b>\r\n                            <p className=\"mb-1\">\r\n                                <MDBIcon icon=\"stop\" />\r\n                                {\" Končna vrednost: \"}\r\n                                <b>{}</b>\r\n                            </p>\r\n                        </h5>\r\n                    </div>\r\n                </MDBListGroupItem>\r\n            </MDBListGroup>\r\n        );\r\n    }\r\n\r\n\r\n    function LabeledHeader({ label, val, mathFont }: HeaderProps) {\r\n        return <div style={{ display: 'flex', marginLeft: 10 }}>\r\n            <span style={{ marginRight: 10, color: '#777', padding: 2, fontStyle: 'italic' }}>{label}</span>\r\n            <span className={!mathFont ? 'math' : 'step-desc'} style={{ color: '#444', padding: 0 }}>{val}</span>\r\n        </div>;\r\n    }\r\n\r\n    function TopPanelRow() {\r\n        const { equation, VSAEExpression, result } = apiBlockOfCode;\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: 'row', width: '100%' }}>\r\n                <div style={{ display: \"flex\", flexDirection: 'column', width: '50%' }}>\r\n                    <LabeledHeader {...{ label: 'Vnešen izraz:', val: equation }} />\r\n                    <LabeledHeader {...{ label: 'VSAE format:', val: VSAEExpression }} />\r\n                    <LabeledHeader {...{ label: 'Končni rezultat:', val: result }} />\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: \"row-reverse\", width: '50%', padding: 5, paddingBottom: 40 }}>\r\n                    <MDBBtnGroup className=\"mr-2\">\r\n                        <MDBBtn color=\"mdb-color\" onClick={() => setModal(true)}><MDBIcon icon=\"list-ol\" /></MDBBtn>\r\n                    </MDBBtnGroup>\r\n                </div>\r\n                <hr style={{ borderTop: '1px solid black' }} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function SecondPanelRow() {\r\n        const { left, right, result, operation, isFunction } = apiBlockOfCode.steps[displayIndex+1] || {};\r\n        let description;\r\n        let equation;\r\n\r\n        if (displayIndex+1 !== apiBlockOfCode.steps.length) {\r\n            if (isFunction) {\r\n                description = `Za naslednjo vrednost ${_nF(left)} izvedemo funkcijo: ${right}`;\r\n                equation = ((right !== 'fac') ? `${right}(${_nF(left)})` : `${_nF(left)}!`) + ` = ${_nF(result)}`;\r\n            } \r\n            else {\r\n                description = `Za naslednje vrednosti ${_nF(left)}, ${_nF(right)} izvedemo operacijo: ${operation}`;\r\n                equation = `${_nF(left)} ${operation} ${_nF(right)} = ${_nF(result)}`;\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <>\r\n                <div style={{ width: 'calc(100%-20px)', height: 1, background: '#aaa', margin: 10 }} />\r\n                <div style={{ display: \"flex\", flexDirection: 'row', width: '100%' }}>\r\n                    <div style={{ display: \"flex\", flexDirection: 'column', width: '50%' }}>\r\n                        <LabeledHeader {...{ label: 'Korak:', val: (displayIndex + 1) || '' }} />\r\n                        <LabeledHeader {...{ label: 'Vmesni korak:', val: description || 'Konec', mathFont: true }} />\r\n                        <LabeledHeader {...{ label: 'Izračun:', val: equation|| '/' }} />\r\n                        <LabeledHeader {...{ label: 'Stanje izraza:', val: equation|| '/' }} />\r\n                    </div>\r\n                    <div style={{ display: \"flex\", flexDirection: \"row-reverse\", width: '50%', padding: 5, paddingBottom: 40 }}>\r\n                        <MDBBtnGroup className=\"mr-2\">\r\n                            <MDBBtn color=\"mdb-color\" onClick={() => changeStepIndex(displayIndex - 1)}><MDBIcon icon=\"angle-double-left\" /></MDBBtn>\r\n                            <MDBBtn color=\"mdb-color\" onClick={() => runSolve(displayIndex + 1)}><MDBIcon icon=\"calculator\" /></MDBBtn>\r\n                            <MDBBtn color=\"mdb-color\" onClick={() => changeStepIndex(displayIndex + 1)}><MDBIcon icon=\"angle-double-right\" /></MDBBtn>\r\n                        </MDBBtnGroup>\r\n                    </div>\r\n                    <hr style={{ borderTop: '1px solid black' }} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', flexDirection: 'row', width: '100%', height: \"80px\" }}>\r\n                <MDBInput\r\n                    value={expression}\r\n                    label=\"Vnesi izraz\"\r\n                    onChange={(e: React.FormEvent<HTMLInputElement>) => setExpression(e.currentTarget.value)}\r\n                />\r\n                <MDBBtn gradient=\"aqua\" onClick={() => setFileUpload(fileupload + 1)} style={{ borderRadius: '50%', width: '80px'}}>\r\n                    <MDBIcon icon=\"upload\" />\r\n                </MDBBtn>\r\n                <MDBBtn gradient=\"blue\" onClick={displayTree} style={{ borderRadius: '50%', width: '80px'}}>\r\n                    <MDBIcon icon=\"equals\" />\r\n                </MDBBtn>\r\n            </div>\r\n            <div>\r\n                {(apiBlockOfCode?.steps?.length && !loading)  ? (\r\n                    <MDBAnimation type=\"bounce\" className='panel'>\r\n                        <div style={{ display: \"flex\", flexDirection: 'column', width: '100%', background: '#ffffff55', padding: '10px' }}>\r\n                            <TopPanelRow/>\r\n                            <SecondPanelRow />\r\n                        </div>\r\n                    </MDBAnimation>\r\n                ) : loading && <Spinner/>}\r\n                <hr />\r\n            </div>\r\n            {(apiBlockOfCode?.steps?.length && !loading) ? <BinaryTree jsonTree={apiBlockOfCode?.steps[displayIndex].tree} />: null}\r\n        </>\r\n    );\r\n\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport sleep from './sleep';\r\nimport api from './api';\r\n\r\nexport const useUpload = (callOut: any) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState<any>(null);\r\n    const reader = new FileReader();\r\n\r\n    useEffect(() => {\r\n        if (callOut != 0 ) {\r\n            const input: any = document.createElement('input');\r\n            input.type = 'file';\r\n            input.style.visibility = 'hidden';\r\n            setTimeout(() => { input.click() }, 200);\r\n            \r\n            input.onchange = () => {\r\n                setLoading(true);\r\n                const file = input.files[0];\r\n                reader.addEventListener(\"load\", async function () {\r\n                    const encodedImage: any = reader.result;\r\n                    const response: any = await api.imgToText(encodedImage);\r\n                    await sleep(500);\r\n                    setData({ responseEquation: response.data.equation });\r\n                    setLoading(false);\r\n                }, false);\r\n\r\n                if (file) {\r\n                    reader.readAsDataURL(file)\r\n                }\r\n            }\r\n        }\r\n    }, [callOut]);\r\n\r\n    return { data, fileIsUplading: loading };\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <div style={{ position: \"absolute\", top: 0, left: 0, height: \"100%\", width: '100%', zIndex: -1 }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n                <path fill=\"#0099ff\" fillOpacity=\"1\" d=\"M0,96L60,101.3C120,107,240,117,360,112C480,107,600,85,720,69.3C840,53,960,43,1080,69.3C1200,96,1320,160,1380,192L1440,224L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"></path>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log('New content is available; please refresh.');\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log('Content is cached for offline use.');\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBContainer } from 'mdbreact';\nimport Content from './layouts/home';\nimport Waves from './components/waves';\nimport headerImg from './resources/header-img.png';\n\nexport default () => {\n\n    function goToDocumentation(): void {\n        window.open(\"https://github.com/JanezSedeljsak/vsae/blob/master/README.md\", \"_blank\")\n    }\n\n    return (\n        <>\n            <Waves />\n            <MDBContainer>\n                <MDBBreadcrumb light className='header'>\n                    <img src={headerImg} style={{ height: 60, marginRight: 40 }} alt=\"VSAE\" />\n                    <MDBBreadcrumbItem icon='file' onClick={goToDocumentation}>\n                        Dokumentacija\n                    </MDBBreadcrumbItem>\n                </MDBBreadcrumb>\n            </MDBContainer>\n            <div className='content'>\n                <Content />\n            </div>\n        </>\n    );\n}\n"],"sourceRoot":""}