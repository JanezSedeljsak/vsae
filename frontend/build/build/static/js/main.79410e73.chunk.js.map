{"version":3,"sources":["resources/header-img.png","helpers/api.ts","helpers/sleep.ts","layouts/binarytree.tsx","layouts/home.tsx","components/waves.tsx","serviceWorker.ts","index.js","App.tsx"],"names":["module","exports","buildJsonTree","expression","Promise","resolve","reject","a","axios","post","JSON","stringify","headers","then","catch","sleep","jsonTree","ms","setTimeout","solvingSteps","Array","props","useState","isSolving","setIsSolving","isDrawing","setIsDrawing","modal","setModal","useEffect","funcOperators","num","Math","cos","degToRad","sin","tan","log10","exp","abs","deg","PI","calcMethods","left","right","Number","pow","recursiveTreeSolve","tree","operation","value","step","push","id","length","String","solveTreeClicked","drawTreeSync","p5","len","line","translate","pop","strokeWeight","ellipse","textSize","text","drawTree","noLoop","all","loop","clear","style","display","justifyContent","color","disabled","onClick","isOpen","toggle","size","icon","width","active","href","className","initExpression","map","item","index","key","dangerouslySetInnerHTML","__html","getModalContent","setup","canvasRef","createCanvas","parent","textFont","stroke","draw","setExpression","undefined","treeForDisplay","setTreeForDisplay","displayTree","api","response","data","result","label","onChange","e","currentTarget","position","top","height","zIndex","xmlns","viewBox","fill","fillOpacity","d","Boolean","window","location","hostname","match","ReactDOM","render","light","src","headerImg","marginRight","alt","open","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79410e73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-img.649e9fa6.png\";","import axios from 'axios';\r\n\r\nconst API_URI : string = \"\"; //'http://localhost:5000';\r\n\r\nexport default class {\r\n    static buildJsonTree = (expression: string) : Promise<Object> => {\r\n        return new Promise(async(resolve, reject) => {\r\n            await axios.post(`${API_URI}/api/bjs`, JSON.stringify({ expression }), {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n                .then(resolve)\r\n                .catch(reject);\r\n        })\r\n    }\r\n}","function sleep(ms: number): Promise<any> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default sleep;","import React, { useState, useEffect } from \"react\";\r\nimport { MDBBtn, MDBModal, MDBModalHeader, MDBListGroup, MDBModalBody, MDBListGroupItem, MDBIcon } from 'mdbreact';\r\nimport Sketch from \"react-p5\";\r\nimport sleep from './../helpers/sleep';\r\nimport treeStructure from './../interfaces/tree';\r\n\r\ninterface Props {\r\n    jsonTree: treeStructure | undefined,\r\n    initExpression: string | undefined\r\n}\r\n\r\ninterface Step {\r\n    id: number,\r\n    step: string\r\n}\r\n\r\nvar jsonTree: treeStructure | undefined; // global variable for tree printing\r\nvar solvingSteps: Array<Step> = new Array(); // global variable for solving steps\r\n\r\nexport default (props: Props) => {\r\n\r\n    const [isSolving, setIsSolving] = useState<boolean | number>(false);\r\n    const [isDrawing, setIsDrawing] = useState<boolean>(true);\r\n    const [modal, setModal] = useState<boolean>(false);\r\n\r\n\r\n    function getModalContent() {\r\n        if (solvingSteps) {\r\n            return (\r\n                <MDBListGroup style={{ width: \"100%\" }}>\r\n                    <MDBListGroupItem active href=\"#\">\r\n                        <div className=\"d-flex w-100 justify-content-between\">\r\n                            <h5 className=\"mb-1\">\r\n                                <MDBIcon icon=\"th\" />\r\n                                {\" Začetni račun: \"}\r\n                                <b>{props.initExpression}</b>\r\n                                <p className=\"mb-1\">\r\n                                    <MDBIcon icon=\"stop\" />\r\n                                    {\" Končna vrednost: \"}\r\n                                    <b>{jsonTree?.value}</b>\r\n                                </p>\r\n                            </h5>\r\n                        </div>\r\n                    </MDBListGroupItem>\r\n                    {solvingSteps.map((item, index) => (\r\n                        <MDBListGroupItem active href=\"#\" key={index}>\r\n                            <div className=\"d-flex w-100 justify-content-between\">\r\n                                <h5 className=\"mb-1\"><MDBIcon icon=\"info-circle\" />{\" Korak: \"}{item.id + 1}</h5>\r\n                            </div>\r\n                            <p className=\"mb-1\" dangerouslySetInnerHTML={{ __html: item.step }} />\r\n                        </MDBListGroupItem>\r\n                    ))}\r\n                </MDBListGroup>\r\n            );\r\n        } else {\r\n            return <p>Izvršena ni bila nobena operacija...</p>\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        jsonTree = props.jsonTree;\r\n    }, []);\r\n\r\n    const funcOperators: any = {\r\n        'cos': (num: number): number => Math.cos(degToRad(num)),\r\n        'sin': (num: number): number => Math.sin(degToRad(num)),\r\n        'tan': (num: number): number => Math.tan(degToRad(num)),\r\n        'log': Math.log10,\r\n        'ln': Math.exp,\r\n        'abs': Math.abs\r\n    };\r\n\r\n    const degToRad = (deg: number): number => (deg * (Math.PI / 180));\r\n\r\n    const calcMethods: any = {\r\n        '+': (left: string, right: string): number => (Number(left) + Number(right)),\r\n        '-': (left: string, right: string): number => (Number(left) - Number(right)),\r\n        '/': (left: string, right: string): number => (Number(left) / Number(right)),\r\n        '*': (left: string, right: string): number => (Number(left) * Number(right)),\r\n        '^': (left: string, right: string): number => Math.pow(Number(left), Number(right)),\r\n        'f': (left: string, right: string): number => (right in funcOperators) ?\r\n            funcOperators[right](Number(left)) : Number(left)\r\n    };\r\n\r\n    async function recursiveTreeSolve(tree: treeStructure | undefined): Promise<number | string> {\r\n        if (tree?.left && tree?.right) {\r\n            const operation = tree?.value;\r\n            tree.value = calcMethods[operation](await recursiveTreeSolve(tree?.left), await recursiveTreeSolve(tree?.right));\r\n            const step = (operation !== 'f') ? (\r\n                `Izvršimo operacijo: ${operation} nad vrednostima: \r\n                ${tree.left.value} & ${tree.right.value}<br/><b>(${tree.left.value} ${operation} ${tree.right.value}) = ${tree.value}</b>`\r\n            ) : (\r\n                `Izvršimo funkcijo: ${tree.right.value} nad vrednostjo: \r\n                ${tree.left.value}<br/><b>${tree.right.value}(${tree.left.value}) = ${tree.value}</b>`\r\n            );\r\n            solvingSteps.push({ id: solvingSteps.length, step });\r\n            tree.left = null;\r\n            tree.right = null;\r\n            await sleep(400);\r\n            return String(tree.value);\r\n        } else {\r\n            return String(tree?.value);\r\n        }\r\n    }\r\n\r\n    async function solveTreeClicked() {\r\n        solvingSteps = new Array();\r\n        setIsSolving(true);\r\n        await sleep(400);\r\n        await recursiveTreeSolve(jsonTree);\r\n        setModal(true);\r\n        setIsSolving(0);\r\n    }\r\n\r\n\r\n    function drawTreeSync(tree: treeStructure | undefined, p5: any, len: number): void {\r\n        if (tree?.left) {\r\n            p5.push();\r\n            p5.line(0, 0, -len, 100);\r\n            p5.translate(-len, 100);\r\n            drawTreeSync(tree.left, p5, len * .5);\r\n            p5.pop();\r\n        }\r\n\r\n        if (tree?.right) {\r\n            p5.push();\r\n            p5.line(0, 0, len, 100);\r\n            p5.translate(len, 100);\r\n            drawTreeSync(tree.right, p5, len * .5);\r\n            p5.pop();\r\n        }\r\n\r\n        p5.strokeWeight(0);\r\n        p5.ellipse(0, 0, 80, 80);\r\n        p5.strokeWeight(2);\r\n        p5.textSize(40);\r\n        p5.text(tree?.value, -12, 15);\r\n    }\r\n\r\n    async function drawTree(tree: treeStructure | undefined, p5: any, len: number) {\r\n        p5.noLoop();\r\n        await sleep(500);\r\n\r\n        Promise.all([\r\n            await (async () => {\r\n                if (tree?.left) {\r\n                    p5.push();\r\n                    p5.line(0, 0, -len, 100);\r\n                    p5.translate(-len, 100);\r\n                    await drawTree(tree.left, p5, len * .5);\r\n                    p5.pop();\r\n                }\r\n            })(),\r\n            await (async () => {\r\n                if (tree?.right) {\r\n                    p5.push();\r\n                    p5.line(0, 0, len, 100);\r\n                    p5.translate(len, 100);\r\n                    await drawTree(tree.right, p5, len * .5);\r\n                    p5.pop();\r\n                }\r\n            })()\r\n        ]);\r\n\r\n        p5.strokeWeight(0);\r\n        p5.ellipse(0, 0, 80, 80);\r\n        p5.strokeWeight(2);\r\n        p5.textSize(40);\r\n        p5.text(tree?.value, -12, 15);\r\n    }\r\n\r\n    function setup(p5: any, canvasRef: any): void {\r\n        p5.createCanvas(1800, 700).parent(canvasRef);\r\n        p5.textFont('Georgia');\r\n        p5.stroke(60);\r\n    }\r\n\r\n    async function draw(p5: any) {\r\n        if (isDrawing) {\r\n            p5.translate(900, 40);\r\n            await drawTree(jsonTree, p5, 350);\r\n            await sleep(500);\r\n            setIsDrawing(false);\r\n            p5.loop();\r\n        } else {\r\n            p5.translate(900, 40);\r\n            p5.clear();\r\n            p5.loop();\r\n            drawTreeSync(jsonTree, p5, 350);\r\n        }\r\n    }\r\n\r\n    function renderActionButtons() {\r\n        return (typeof isSolving === typeof 0) ? (\r\n            <MDBBtn\r\n                color=\"mdb-color\"\r\n                disabled={modal}\r\n                onClick={() => setModal(true)}\r\n            >Prikaži korake reševanja</MDBBtn>\r\n        ) : (\r\n                <MDBBtn\r\n                    color=\"mdb-color\"\r\n                    disabled={!jsonTree || isDrawing || !!isSolving}\r\n                    onClick={solveTreeClicked}\r\n                >Reši binarno drevo</MDBBtn>\r\n            );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                {renderActionButtons()}\r\n                <MDBModal isOpen={modal} toggle={() => setModal(!modal)} size=\"lg\">\r\n                    <MDBModalHeader toggle={() => setModal(!modal)}>\r\n                        <MDBIcon icon=\"list-ol\" />{\" Postopek reševanja\"}\r\n                    </MDBModalHeader>\r\n                    <MDBModalBody>\r\n                        {getModalContent()}\r\n                    </MDBModalBody>\r\n                </MDBModal>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <Sketch setup={setup} draw={draw} />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { MDBInput, MDBBtn } from \"mdbreact\";\r\nimport api from './../helpers/api';\r\nimport BinaryTree from './binarytree';\r\nimport sleep from './../helpers/sleep';\r\nimport treeStructure from './../interfaces/tree';\r\n\r\nexport default () => {\r\n    const [expression, setExpression] = useState<string>('');\r\n    const [treeForDisplay, setTreeForDisplay] = useState<treeStructure | undefined>(undefined);\r\n\r\n    function validateExpression(str: string): boolean {\r\n        return true;\r\n    }\r\n\r\n    const displayTree = async () : Promise<void> => {\r\n\r\n        // force to re-render binary-tree component\r\n        if (treeForDisplay) { \r\n            setTreeForDisplay(undefined);\r\n            await sleep(500);\r\n        }\r\n        \r\n        const response : any = await api.buildJsonTree(expression);\r\n        await setTreeForDisplay(response.data.result);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <MDBInput\r\n                value={expression}\r\n                label=\"Vnesi izraz\"\r\n                onChange={(e: React.FormEvent<HTMLInputElement>) => setExpression(e.currentTarget.value)}\r\n            />\r\n            <MDBBtn \r\n                disabled={!validateExpression(expression)}\r\n                onClick={displayTree}\r\n            >\r\n                Prikaži binarno drevo\r\n            </MDBBtn>\r\n            <hr />\r\n            {treeForDisplay && <BinaryTree initExpression={expression} jsonTree={treeForDisplay} />}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <div style={{ position: \"absolute\", top: 0, left: 0, height: \"100%\", width: '100%', zIndex: -1 }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n                <path fill=\"#0099ff\" fillOpacity=\"1\" d=\"M0,96L60,101.3C120,107,240,117,360,112C480,107,600,85,720,69.3C840,53,960,43,1080,69.3C1200,96,1320,160,1380,192L1440,224L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z\"></path>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log('New content is available; please refresh.');\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log('Content is cached for offline use.');\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBContainer } from 'mdbreact';\nimport Content from './layouts/home';\nimport Waves from './components/waves';\nimport headerImg from './resources/header-img.png';\n\nexport default () => {\n\n    function goToDocumentation(): void {\n        window.open(\"https://github.com/JanezSedeljsak/vsae/blob/master/README.md\", \"_blank\")\n    }\n\n    return (\n        <>\n            <Waves />\n            <MDBContainer>\n                <MDBBreadcrumb light className='header'>\n                    <img src={headerImg} style={{ height: 60, marginRight: 40 }} alt=\"VSAE\" />\n                    <MDBBreadcrumbItem icon='file' onClick={goToDocumentation}>\n                        Dokumentacija\n                    </MDBBreadcrumbItem>\n                </MDBBreadcrumb>\n            </MDBContainer>\n            <div className='content'>\n                <Content />\n            </div>\n        </>\n    );\n}\n"],"sourceRoot":""}